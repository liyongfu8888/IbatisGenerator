package com.tomcat.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TbLotteryNumExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public TbLotteryNumExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    protected TbLotteryNumExample(TbLotteryNumExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table tb_lottery_num
     *
     * @ibatorgenerated Fri Dec 09 14:23:08 CST 2016
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andUseridIsNull() {
            addCriterion("userId is null");
            return this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("userId is not null");
            return this;
        }

        public Criteria andUseridEqualTo(Integer value) {
            addCriterion("userId =", value, "userid");
            return this;
        }

        public Criteria andUseridNotEqualTo(Integer value) {
            addCriterion("userId <>", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThan(Integer value) {
            addCriterion("userId >", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(Integer value) {
            addCriterion("userId >=", value, "userid");
            return this;
        }

        public Criteria andUseridLessThan(Integer value) {
            addCriterion("userId <", value, "userid");
            return this;
        }

        public Criteria andUseridLessThanOrEqualTo(Integer value) {
            addCriterion("userId <=", value, "userid");
            return this;
        }

        public Criteria andUseridIn(List values) {
            addCriterion("userId in", values, "userid");
            return this;
        }

        public Criteria andUseridNotIn(List values) {
            addCriterion("userId not in", values, "userid");
            return this;
        }

        public Criteria andUseridBetween(Integer value1, Integer value2) {
            addCriterion("userId between", value1, value2, "userid");
            return this;
        }

        public Criteria andUseridNotBetween(Integer value1, Integer value2) {
            addCriterion("userId not between", value1, value2, "userid");
            return this;
        }

        public Criteria andChoujiangnumIsNull() {
            addCriterion("choujiangNum is null");
            return this;
        }

        public Criteria andChoujiangnumIsNotNull() {
            addCriterion("choujiangNum is not null");
            return this;
        }

        public Criteria andChoujiangnumEqualTo(Integer value) {
            addCriterion("choujiangNum =", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumNotEqualTo(Integer value) {
            addCriterion("choujiangNum <>", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumGreaterThan(Integer value) {
            addCriterion("choujiangNum >", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumGreaterThanOrEqualTo(Integer value) {
            addCriterion("choujiangNum >=", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumLessThan(Integer value) {
            addCriterion("choujiangNum <", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumLessThanOrEqualTo(Integer value) {
            addCriterion("choujiangNum <=", value, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumIn(List values) {
            addCriterion("choujiangNum in", values, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumNotIn(List values) {
            addCriterion("choujiangNum not in", values, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumBetween(Integer value1, Integer value2) {
            addCriterion("choujiangNum between", value1, value2, "choujiangnum");
            return this;
        }

        public Criteria andChoujiangnumNotBetween(Integer value1, Integer value2) {
            addCriterion("choujiangNum not between", value1, value2, "choujiangnum");
            return this;
        }

        public Criteria andIsflagIsNull() {
            addCriterion("isFlag is null");
            return this;
        }

        public Criteria andIsflagIsNotNull() {
            addCriterion("isFlag is not null");
            return this;
        }

        public Criteria andIsflagEqualTo(Integer value) {
            addCriterion("isFlag =", value, "isflag");
            return this;
        }

        public Criteria andIsflagNotEqualTo(Integer value) {
            addCriterion("isFlag <>", value, "isflag");
            return this;
        }

        public Criteria andIsflagGreaterThan(Integer value) {
            addCriterion("isFlag >", value, "isflag");
            return this;
        }

        public Criteria andIsflagGreaterThanOrEqualTo(Integer value) {
            addCriterion("isFlag >=", value, "isflag");
            return this;
        }

        public Criteria andIsflagLessThan(Integer value) {
            addCriterion("isFlag <", value, "isflag");
            return this;
        }

        public Criteria andIsflagLessThanOrEqualTo(Integer value) {
            addCriterion("isFlag <=", value, "isflag");
            return this;
        }

        public Criteria andIsflagIn(List values) {
            addCriterion("isFlag in", values, "isflag");
            return this;
        }

        public Criteria andIsflagNotIn(List values) {
            addCriterion("isFlag not in", values, "isflag");
            return this;
        }

        public Criteria andIsflagBetween(Integer value1, Integer value2) {
            addCriterion("isFlag between", value1, value2, "isflag");
            return this;
        }

        public Criteria andIsflagNotBetween(Integer value1, Integer value2) {
            addCriterion("isFlag not between", value1, value2, "isflag");
            return this;
        }
    }
}